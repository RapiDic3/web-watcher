<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Web-watcher</title><link>https://shellbear.github.io/web-watcher/</link><description>Recent content on Web-watcher</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Made with ❤️️ by shellbear.</copyright><atom:link href="https://shellbear.github.io/web-watcher/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://shellbear.github.io/web-watcher/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://shellbear.github.io/web-watcher/introduction/</guid><description>I did this project because I wanted to track changes to a website. It helped me a lot, so I wanted to share my code with others.
How it works? Currently, web-watcher only supports static HTML pages, it analyzes the structure of the page and the tags and defines a ratio which determines whether the page has changed or not. Thus, text changes are not detected, only changes in the structure of the page itself are detected.</description></item><item><title>Requirements</title><link>https://shellbear.github.io/web-watcher/requirements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://shellbear.github.io/web-watcher/requirements/</guid><description>First of all, you have to create a new discord bot, generate a token and add the bot to the server of your choice.
If you don&amp;rsquo;t know how to so, here are some few steps:
Go to the discord developer portal and create a new application with the name of your choice:
Click on the Bot tab on the left and create a new bot:
Then go to the OAuth2 tab, check the Bot scope and the Send messages permission:</description></item><item><title>Install</title><link>https://shellbear.github.io/web-watcher/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://shellbear.github.io/web-watcher/install/</guid><description>You can install the pre-compiled binary (in several different ways), use Docker or compile from source.
Here are the steps for each of them:
Install the pre-compiled binary Download the pre-compiled binaries from the releases page and copy to the desired location.
Running with Docker You can also run it within a Docker container. Here as follows an example command:
export DISCORD_TOKEN=XXXXXXXXX.... docker run -d \ -e DISCORD_TOKEN \ -v web-watcher-data:/app \ --name web-watcher \ docker.</description></item><item><title>Usage</title><link>https://shellbear.github.io/web-watcher/usage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://shellbear.github.io/web-watcher/usage/</guid><description>You can pass customize some options.
&amp;gt; web-watcher --help Web-watcher discord Bot. Options: -interval int The watcher interval in minutes (default 60) -prefix string The discord commands prefix (default &amp;#34;!&amp;#34;) -ratio float Changes detection ratio (default 1) -token string Discord token Arguments --interval
The watcher interval in minutes (default 60).
The watcher will check for website changes at this given interval.
--prefix
The discord commands prefix (default !).
--ratio
The web page changes ratio.</description></item><item><title>Commands</title><link>https://shellbear.github.io/web-watcher/commands/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://shellbear.github.io/web-watcher/commands/</guid><description>!watch [URL]
Add a URL to the watchlist.
!unwatch [URL]
Remove a URL from the watchlist.
!watchlist
Get the complete watchlist.
Note: you can customize the command prefix (!) with the --prefix parameter, for information, check the usage page.</description></item><item><title>Credits</title><link>https://shellbear.github.io/web-watcher/credits/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://shellbear.github.io/web-watcher/credits/</guid><description>This bot is built with these awesome dependencies:
go-difflib - Partial port of Python difflib package to Go xxhash - Go implementation of the 64-bit xxHash algorithm (XXH64) Gorm - The fantastic ORM library for Golang DiscordGo - Go bindings for Discord</description></item><item><title>Links</title><link>https://shellbear.github.io/web-watcher/links/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://shellbear.github.io/web-watcher/links/</guid><description> Follow the progress on the GitHub repository Follow me on twitter @_shellbear</description></item></channel></rss>